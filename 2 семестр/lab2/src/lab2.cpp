/**
 * Лабораторная работа №2. Массивы объектов, простое наследование, виртуальные
 * функции, применение наследования.
 *
 * В этой работе и далее предполагается, что вы будете использовать классы,
 * написанные в прошлых работах, и дополнять их по необходимости. Эти классы
 * будут называться по имени без дополнительных указаний, что их надо взять из
 * прошлой работы.
 *
 * Предполагается, что новый классы будут созданы по аналогии с предыдущими
 * работами в отдельных файлах, которые будут включены в сборку.
 *
 * При работе с классами - в учебных целях - нельзя пользоваться контейнерами
 * стандартной библиотеки и нужно следовать принципам инкапсуляции.
 */

#include "lab2.h"
#include "my_string/my_string.h"
#include "base_file/i_file/i_file.h"
#include "base_file/base_file.h"
#include "base_file/base32_file/base32_file.h"
#include "base_file/rle_file/rle_file.h"

int main() {
    /**
     * Задание 1. Массивы объектов класса.
     */

    /**
     * Задание 1.1. Массив объектов.
     *
     * Объявите и проинициализируйте массив ar из объектов типа MyString.
     * Выведите элементы массива на консоль.
     */

    {
      std::cout << "1.1\n\n";
      MyString ar[3] = {"abc", "qwerty", "alip"};

      for (int i = 0; i < 3; i++)
        ar[i].print();
    }

    /**
     * Замените размер массива с 3 на 5, не меняя список инициализаторов.
     *
     * Чем были инициализированы последние 2 элемента? Какие значения могут
     * стоять в списке инициализаторов - в вашем случае и в общем случае?
     */
    {
      std::cout << "\n\n1.2\n\n";
      MyString ar[5] = {"abc", "qwerty", "alip"};

      for (int i = 0; i < 5; i++)
        ar[i].print();

      // последние два элемента инициализированы через стандартный конструктор
      // значения в списке инициализаторов такого же типа, что указан в начале, либо ничего (4 и 5 элементы) 
    }

    /**
     * Задание 1.2. Массив указателей на объекты.
     *
     * Объявите и проинициализируйте массив arPtr из трех указателей на объекты
     * типа MyString. Выведите элементы массива на консоль.
     */
    {
      std::cout << "\n\n1.3\n\n";
      MyString ar[3] = {"abc", "qwerty", "alip"};
      MyString *arPtr[3] = {&ar[0], &ar[1], &ar[2]};

      for (int i = 0; i < 3; i++)
        arPtr[i]->print();
    }

    /**
     * Задание 2. Простое наследование. Аргументы конструктора, передаваемые в
     * базовый класс.
     */

    /**
     * Задание 2.1. Базовый класс.
     *
     * Создайте класс BaseFile, который будет реализовывать работу с файлами с
     * помощью стандартных средств C (cstdio).
     *
     * Класс должен иметь 3 конструктора: первый - конструктор по умолчанию,
     * второй должен принимать путь к файлу и параметры для открытия (как в
     * fopen), третий должен принимать готовый указатель FILE*.
     *
     * Считается, что этот класс *обладает* своим ресурсом - открытым файлом.
     * Что должно быть в дестукторе этого класса?
     *
     * Добавьте следующие методы:
     * - bool is_open() - возвращает true, если файл успешно открыт;
     * - bool can_read() - возвращает true, если из файла можно считать данные;
     * - bool can_write() - возвращает true, если в файл можно записать данные;
     * - int write_raw(const void *buf, int n_bytes) - записывает
     *   указанное количество байт в файл и возвращает количество байт, которое
     *   удалось записать;
     * - int read_raw(void *buf, int max_bytes) - читает доступные данные
     *   в буфер, но не более указанного количества и возвращает количество
     *   байт, которое удалось считать;
     * - long tell() - возвращает текущий сдвиг файла (см. функцию ftell);
     * - bool seek(long offset) - устанавливает сдвиг файла (см. функцию fseek)
     *   и возвращает true, если операция успешна.
     *
     * Добавьте также методы `read` и `write`, которые в этом классе будут
     * делать буквально то же, что `read_raw` и `write_raw`, они понадобятся нам
     * позже.
     *
     * Проверьте работу этого класса.
     */
    {
      std::cout << "\n\n2.1\n\n";
      
      BaseFile A("a.txt", "w");
      const char *data = "abc";
      
      int n = A.write_raw(data, 3);
      
      A.close();

      BaseFile B("a.txt", "r");
      char buf[4] {};
      
      n = B.read_raw(buf, 3);
      
      for (int i = 0; i < 4; i++)
        std::cout << buf[i];
    }

    /**
     * Задание 2.2. Производные классы.
     *
     * Производный класс *наследуется* от базового класса и каким-то образом
     * расширяет его функциональность, при это все еще умея все, что умеет
     * базовый класс.
     *
     * Реализуйте следующие производные классы от класса BaseFile. Производные
     * классы нужно унаследовать так, чтобы пользователю были все еще доступны
     * методы базового класса. Каким образом нужно унаследовать класс для этого?
     * Как еще можно унаследовать класс?
     *
     * Производные классы могут располагаться в том же файле, где и базовый
     * класс.
     *
     * В производных классах добавьте необходимые конструкторы, которые будут
     * вызывать конструктор базового класса.
     *
     * Проверьте работу производных классов.
     */

    // унаследовать public
    // еще можно protected (поля и методы родителя: private - не доступно, protected и public - protected)
    //         и private (поля и методы родителя: private - не доступно, protected и public - private)

    /**
     * Задание 2.2.1. Base32 кодировщик/декодировщик.
     *
     * Создайте производный класс Base32File, который будет проводить при
     * записи кодировку-декодировку данных, по алгоритму, который вы
     * реализовали в лабораторной работе №4 прошлого семестра.
     *
     * Переопределите методы `read` и `write`, которые будут проводить чтение из
     * файла с декодировкой и запись в файл с кодировкой соответственно.
     *
     * Добавьте возможность пользователю передать в конструктор таблицу
     * кодировки, по умолчанию используется таблица "A..Z1..6".
     */
    {
      std::cout << "\n\n2.2.1\n\n";
      
      const char *str = "1E47 sdgblabgs jhdgslajgdas";
      Base32File A("a.txt", "w");
      
      int size = A.write(str, (int)strlen(str));
      A.close();
      
      Base32File B("a.txt", "r");
      int read_size = (int)strlen(str);
      char *res = new char[read_size] {};
      
      B.read(res, read_size);
      
      for (int i = 0; i < read_size; i++)
        std::cout << res[i];
      
      delete[] res;
    }

    {
      //Base32File2 f;
    }

    /**
     * Задание 2.2.2. RLE-сжатие.
     *
     * Создайте производный класс RleFile, который будет проводить побайтовое
     * сжатие при помощи алгоримта RLE (для простоты можно реализовать
     * неэффективный алгоритм, где последовательности без повторений отдельно
     * не кодируются).
     *
     * Переопределите методы `read` и `write`, которые будут проводить чтение из
     * файла с извлечением сжатой информации и запись в файл со сжатием
     * соответственно.
     *
     * Проверьте сжатие/извлечение на примере какого-нибудь ASCII-арта,
     * например, котенка из лабораторной №3 прошлого семестра. Посмотрите,
     * получилось ли добиться уменьшения размера хранимых данных.
     */
    {
      std::cout << "\n\n2.2.2\n\n";
      // std::string s =       
      // "     \\\n"
      // "      \\\n"
      // "        /\\_/\\  (\n"
      // "       ( ^.^ ) _)\n"
      // "         \\\"/  (\n"
      // "       ( | | )\n"
      // "      (__d b__)\n";
      
      std::string s = "aaaaaaaaaaaaaaaaaaaaaadbbbbbbbbbbbbbdbbbbbbbbbffffffffff";
      
      RleFile A("b.txt", "w");
      int new_size = (int)s.length();
      int size = A.write(s.c_str(), new_size);
      
      A.close();
      
      RleFile B("b.txt", "r");
      char *buf = new char[new_size] {};
      
      int res = B.read(buf, size);
      
      std::cout << "\n\n";

      for (int i = 0; i < new_size; i++)
        std::cout << buf[i];

      std::cout << "\n\n";

      delete[] buf;
    }

    /**
     * Задание 2.3. Конструкторы и деструкторы базового и производного классов.
     *
     * Установите отладочную печать в конструкторах и деструкторах каждого
     * класса из этого задания. Создайте локальные объекты производных классов,
     * отметьте, в каком порядке вызываются конструкторы и деструкторы при
     * инициализации и деинициализации этих классов.
     */
    {
      std::cout << "\n\n2.3\n\n";

      BaseFile A;
      Base32File B;
      RleFile C;
    }
    /**
     * Задание 2.4. Ранее связывание.
     *
     * На основе данной заготовки напишите код, который запишет в файл строковое
     * представление целого числа. Вы должны использовать один и тот же код для
     * всех файлов, меняя только имя объекта (bf / b32f / rf), в который идет
     * запись.
     */

    {
      std::cout << "\n\n2.4\n\n";
      BaseFile bf("a.txt", "w");
      Base32File b32f("b.txt", "w");
      RleFile rf("c.txt", "w");

      {
        int n = 123456;
        char buf[10] {};
        int len = 0;
      
        if (n < 0)
        {
          bf.write("-", 1);
          n = -n;
        }
      
        while (n > 0)
          buf[len++] = n % 10 + '0', n = n / 10;
      
        for (int i = len - 1; i >= 0; i--)
          bf.write(&buf[i], 1);
      }
      
      {
        int n = 123456;
        char buf[10] {};
        int len = 0;
      
        if (n < 0)
        {
          b32f.write("-", 1);
          n = -n;
        }
      
        while (n > 0)
          buf[len++] = n % 10 + '0', n = n / 10;
      
        for (int i = len - 1; i >= 0; i--)
          b32f.write(&buf[i], 1);
      }

      {
        int n = 123456;
        char buf[10] {};
        int len = 0;

        if (n < 0)
        {
          rf.write("-", 1);
          n = -n;
        }

        while (n > 0)
          buf[len++] = n % 10 + '0', n = n / 10;

        for (int i = len - 1; i >= 0; i--)
          rf.write(&buf[i], 1);
      }
    }

    /**
     * Задание 2.5. Передача объекта по ссылке / указателю.
     *
     * Прошлое задание выглядит странновато - зачем повторять код три раза?
     * Хорошо бы сделать функцию, которая примет объект файла и число, и
     * выполнит эти действия.
     *
     * Реализуйте функцию `write_size_t(BaseFile &file, int n)`, которая будет
     * принимать ссылку на файл и число, которое нужно будет напечатать.
     *
     * Принцип наследования предписывает, что везде, где можно использовать
     * базовый класс, можно использовать производный класс. Проверьте, можно
     * ли вызвать функцию, передав в нее объект класса Base32File и RleFile.
     *
     * Имеет ли вызов этой функции для производного класса тот же результат,
     * что и код, который вы написали выше? Почему?
     */

    // Нет, т.к. в функцию передается родительский класс, т.е. производные классы преобразуются к нему
    // везде 123456

    {
      std::cout << "\n\n2.5\n\n";

      BaseFile bf("d.txt", "w");
      Base32File b32f("e.txt", "w");
      RleFile rf("f.txt", "w");

      int n = 123456;

      write_size_t(bf, n);
      write_size_t(b32f, n);
      write_size_t(rf, n);

      char c = 'c';
      char *p = &c;

      int x = 0;
    }
    /**
     * Задание 2.6. Виртуальные функции, позднее связывание.
     *
     * Объявите функции read и write в базовом классе *виртуальными*. Что это
     * означает? Как изменился размер объектов классов BaseFile, Base32File и
     * RleFile? Почему?
     *
     * Как изменилось поведение при вызове функции `write_size_t` для производных
     * классов? Почему?
     */
    // Было: BaseFile - 24, Base32File - 48, RleFile - 24
    // Стало: BaseFile - 32, Base32File - 56, RleFile - 32


    // размер увеличился, т.к. в каждый класс добавилсь указатель на 
    // таблицу виртуальных функций (нужна для позднего связывания).

    // печатается то, что нужно, т.к. есть указатель на то, какими должны быть
    // read и write для каждого класса


    /**
     * Задание 2.7. Виртуальный деструктор.
     *
     * В следующем блоке кода добавьте удаление динамической памяти.
     *
     * Какой деструктор при этом вызывается? Почему? К каким проблемам это может
     * привести?
     *
     * Исправьте эту ситуацию.
     */

    // вызывается деструктор BaseFile, т.к. тип массива BaseFile
    // не вызвались деструкторы -> не вызвалось удаление памяти

    {

      std::cout << "\n\n2.7\n\n";
      
      BaseFile *files[] = { 
          new BaseFile("d.txt", "w"), 
          new RleFile("e.txt", "w"), 
          new Base32File("f.txt", "w"), 
      };

      for (int i = 0; i < 3; ++i) {
          files[i]->write("Hello!", 6);
      }

      for (int i = 0; i < 3; i++)
        delete files[i];
    }

    /**
     * Задание 2.8. Массив объектов производных классов.
     *
     * Раскомментируйте следующий блок и объясните, почему:
     * а) не возникает ошибок при компиляции;
     * б) возникают ошибки при выполнении.
     *
     * Этот пример показывает очень плохую практику, которая приводит к ошибкам;
     * для создания массива объектов производного класса и используйте массив
     * указателей на базовый класс, как это было сделано выше. Реализуйте ту же
     * логику, используя массив указателей на объекты базового класса.
     */

    // ошибка при выполнении: тип b32_files BaseFile * -> размер элемента предполагается как 32, а не 56
    // поэтому b32_files[1] указывает на что то внутри b32_files[0], то есть на мусор

    {
      /*
        BaseFile *base_files = new BaseFile[2] { BaseFile("a.txt", "w"), BaseFile("b.txt", "w") };
        BaseFile *b32_files = new Base32File[2] { Base32File("c.txt", "w"), Base32File("d.txt", "w") };
        
        for (int i = 0; i < 2; ++i)
        {
          base_files[i].write("Hello!", 6);
          b32_files[i].write("Hello!", 6);
        }
        
        delete[] base_files;
        delete[] b32_files;
        */

        BaseFile *base_files = new BaseFile[2] { BaseFile("a.txt", "w"), BaseFile("b.txt", "w") };
        BaseFile **b32_files = new BaseFile * [2];
        
        b32_files[0] = new Base32File("c.txt", "w");
        b32_files[1] = new Base32File("d.txt", "w");
        
        for (int i = 0; i < 2; ++i)
        {
          base_files[i].write("Hello!", 6);
          b32_files[i]->write("Hello!", 6);
        }
        
        delete b32_files[0];
        delete b32_files[1];

        delete[] base_files;
        delete[] b32_files;

    }

    /**
     * Задание 3. Чисто виртуальные функции. Интерфейсы. Композиция классов.
     *
     * Наследование позволяет довольно просто переиспользовать данные и логику
     * других классов, однако зачастую этот механизм недостаточно гибкий для
     * полноценного переиспользования.
     *
     * Например, сможем ли мы в получившейся иерархии классов реализовать
     * одновременно и кодирование в base32, и сжатие при записи данных в файл?
     * Или сможем ли мы вместо записи в файл на диске делать запись в строковый
     * буфер в памяти?
     *
     * При дальнейшем рассмотрении окажется, что при помощи наследования мы
     * крепко *связали* логику преобразования данных с записью в конкретный
     * файл. Далее мы рассмотрим один из способов разделения такой логики.
     */

    /**
     * Задание 3.1. Абстрактный базовый класс, чисто виртуальные функции.
     *
     * Первая проблема в нашей реализации - все наследники BaseFile будут всегда
     * обязаны непосредственно писать в файл на диске. Чтобы избавиться от этой
     * необходимости, стоит сделать базовый класс *абстрактным* в том смысле,
     * что у него не будет полей связанных с конкретным способом писать в файл.
     *
     * Создайте класс `IFile`, в котором не будет полей, но будут методы
     * `can_read`, `can_write`, `read` и `write` с такими же сигнатурами, как и
     * классе `BaseFile`. Что именно будут делать эти методы? Класс `IFile` не
     * может знать, поскольку логику этих методов будут определять наследники.
     * В этом классе эти методы не имеют реализации, и они должны быть объявлены
     * *чисто виртуальными*.
     *
     * Какие ограничения накладывает на класс наличие чисто виртуального метода?
     *
     * Получается, что в классе `IFile` есть только чисто виртуальные методы, и
     * единственная цель такого класса - определять, что должны уметь делать его
     * наследники. Совокупность действий, которые можно сделать с объектом,
     * называется его *интерфейсом*, и такие классы тоже часто называются
     * интерфейсами, отсюда берется приставка "I" в имени класса.
     *
     * Унаследуйте класс `BaseFile` от класса `IFile` и измените функцию
     * `write_size_t`, чтобы она работала с произвольным наследником `IFile`.
     *
     * Убедитесь, что в программе выше ничего не сломалось.
     */

    // нельзя создать объект типа IFile, в наследниках все функции обязательно должны быть переопределены

    /**
     * Задание 3.2. Композиция вместо наследования.
     *
     * Реализуйте классы `Base32File2` и `RleFile2`, которые будут унаследованы
     * от класса `IFile` и в конструкторе будут получать другой объект `IFile`,
     * чьи функции они будут использовать вместо функций базового класса.
     *
     * Объекты получают объект `IFile` в виде указателя на динамически
     * выделенную память, и они ответственны за ее очищение.
     *
     * Использование объектом другого объекта в качестве поля называется
     * *композицией*.
     *
     * Проверьте, что используемые ниже объекты работают так же, как объекты
     * классов `Base32File` и `RleFile`.
     */

    {
      std::cout << "\n\n\n\n3.2\n\n\n";

      Base32File2 b32f(new BaseFile("a.txt", "w"));
      RleFile2 rf(new Base32File("b.txt", "w"));
      write_size_t(b32f, 123456);
      write_size_t(rf, 123456);
    }

    /**
     * Задание 3.3. Больше композиции!
     *
     * Не реализовывая больше никаких классов, соорудите объект-наследник IFile,
     * который будет при вызове метода `write` два раза кодировать в base32,
     * после чего применять сжатие RLE и только после этого писать в файл.
     */

    {
      Base32File2 b32f(new Base32File2(new RleFile("a.txt", "w")));
      write_size_t(b32f, 123456);
    }

    {
      std::string str = "aaaaaaaaaabbbbbbbbb";
      RleFile w("a.txt", "w");

      w.write(str.c_str(), 19);

      w.close();

      RleFile r("a.txt", "r");
      char buf1[6] {}, buf2[11] {};

      r.read(buf1, 5);

      r.read(buf2, 10);

      int x = 0;
    }
    return 0;
}
