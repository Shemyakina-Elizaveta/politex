/**
 * Практическое занятие №4. Функции. Объявление, определение, вызов. Передача
 * параметров. Возвращение значения.
 */
// #include <iostream>
// #include <math.h>
//#include <cstdio>
//#include <cstdarg>

#include "other.h"


size_t main()
{
    /**
     * Задание 1. Ссылки.
     *
     * Объявите ссылку на тип double. Посредством ссылки измените значение.
     */

    {
      double x = 5;
      double &y = x;

      y = 7;
    }

    /**
     * Раскомментируйте следующую строку. 
     *
     * Объясните, почему возникает ошибка? Что следует сделать, чтобы
     * компилятор не выдавал ошибки?
     */
    {
      // size_t &ref = 1;
      const size_t &ref = 1;

      // по ссылке можно менять объект, на который она ссылается; 1 - константа, ее поменять нельзя
    }

    /**
     * Ниже задан указатель `pc`, задайте ссылку на этот указатель.
     *
     * Посредством ссылки измените:
     * 1. значение по адресу;
     * 2. сам адрес.
     */

    {
        char c = 'A';
        char * pc = &c;
        char * &spc = pc;

        *spc = 'B';
        spc++;
    }

    /**
     * Задание 2. Передача параметров в функцию.
     */

    /**
     * Задание 2.1.
     *
     * Объявите и определите три функции, которые увеличивают заданное с
     * помощью параметра значение на 1:
     *
     * 1. функция inc_by_value() - в нее аргумент передается по значению;
     * 2. функция inc_by_posize_ter() - в нее аргумент передается по указателю;
     * 3. функция inc_by_reference() - в нее аргумент передается по ссылке.
     *
     * Поместите объявления этих функций в заголовочный файл `other.h`, а их
     * определение в `other.cpp`.
     */

    //Замечание: объявления функций принято помещать в заголовочный файл
    {
      /** 
       * Значение этой переменной должно быть увеличено с помощью каждой из
       * функций на единицу.
       */
      size_t val = 1;

      val = inc_by_value(val);
      val = inc_by_posize_ter(&val);
      val = inc_by_reference(val);
    }

    /**
     * Задание 2.2. Передача параметров c помощью указателя и по ссылке.
     * Перегруженные имена функций.
     *
     * Создайте функцию (функции) swap(), которая меняет значения переменных nX
     * и nY местами:
     *
     * 1. Функция должна принимать два указателя на size_t, оперируя с которыми
     *    менять значения переменных в вызывающей программе. 
     * 2. Функция должна принимать две ссылки на size_t. 
     *
     * Проверьте правильность с помощью приведенного ниже фрагмента.
     */

    {
        size_t nX = 1;
        size_t nY = -1;
        /** поменяли местами значения nX и nY с помощью указателей на nX и nY */
        swap(&nX, &nY);
        /** а теперь обратно с помощью ссылок на nX и nY */
        swap(nX, nY);
    }

    /**
     * Задание 3. Указатели на массивы в качестве аргументов.
     */

    /**
     * Задание 3.1. Поиск минимума в массиве.
     *
     * Напишите следующие функции для поиска минимума в целочисленном массиве:
     *
     * 1. Для поиска в одномерном массиве.
     * 2. Для поиска в двумерном динамическом массиве (массиве указателей).
     *
     * Что надо передать в такую функцию кроме самого массива?
     *
     * Постарайтесь использовать во второй функции первую, чтобы не повторять
     * логику.
     */
    {
      std::cout << "\n3.1\n";

      /** Задайте массивы для проверки и проверьте результат работы функции */
      size_t N, M;
      size_t *A, **B;

      std::cout << "Input N: ";
      std::cin >> N;
      assert(N > 0);
      std::cout << "Input M: ";
      std::cin >> M;
      assert(M > 0);

      A = new size_t[N];
      for (size_t i = 0; i < N; i++)
        A[i] = rand();

      find_min(A, N);
      // std::cout << "In one-dimensional array min = " << find_min(A, N) << '\n';
      delete[] A;

      B = new size_t *[N];
      for (size_t i = 0; i < N; i++)
      {
        B[i] = new size_t[M];
        for (size_t j = 0; j < M; j++)
          B[i][j] = rand();
      }

      find_min(B, N, M);
      // std::cout << "In two-dimensional array min = " << find_min(B, N, M) << '\n';

      for (size_t i = 0; i < N; i++)
        delete[] B[i];
      delete[] B;

      /** 
       * Покажите, как можно использовать эту функцию для встроенных
       * двумерных массивов.
       */
    }

    /**
     * Задание 3.2. Сравнение строк.
     *
     * Напишите функцию сравнения двух строк - my_str_cmp().
     *
     * Функция должна принимать два указателя на сравниваемые строки.
     *
     * Функция должна возвращать отрицательное значение, если первая строка
     * лексиграфически меньше второй, 0 - если они равны и положительное
     * значение, если первая строка больше второй.
     *
     * Вспомните, что признаком конца строки является нулевой байт.
     */

    {
      /** Создайте две строки для сравнения */
      char str1[10] = "gagjhadfk", str2[10] = "gagjhabfk";
      /** Вызовите функцию сравнения */
      size_t res = my_str_cmp(str1, str2);

      /** Выведите результат сравнения с помощью cout */
      std::cout << "\n3.2\n" << "str_cmp(" << str1 << ", " << str2 << ") = " << res << '\n';
    }

    /**
     * Задание 3.3. Типизация параметров и проверка предварительных условий.
     */

    /**
     * Задание 3.3.1.
     *
     * При передаче данных по ссылке или по указателю хорошим тоном является
     * указывать, собирается ли функция менять данные по этим адресам или нет,
     * с помощью константности указателя (вспоминаем лабораторную №2).
     *
     * Задайте в заданиях 3.1 и 3.2 те указатели, которые используются только
     * на чтение, константными.
     */

    /**
     * Задание 3.3.2.
     *
     * К сожалению, система типов языка С (как впрочем и других языков)
     * недостаточно выразительна, чтобы с помощью типов передаваемых параметров
     * выразить ожидания функции по поводу входных данных. Поэтому внутри
     * функций бывает необходимо устанавливать дополнительные проверки.
     *
     * Например, в функциях из задания 3.1 вы, вероятно, передавали в качестве
     * аргумента размер массива и, так же вероятно, что результат выполнения
     * функции не будет иметь смысла, если этот размер меньше 1.
     *
     * Для служебных функций - то есть таких функций, которые используются вами
     * же и вашими коллегами - хорошим тоном является с помощью макроса
     * `assert` из заголовочного файла `cassert`. Для других функций необходимо
     * сигнализовать об ошибке более вдумчиво.
     *
     * Добавьте проверку положительности размера в функции из задания 3.1 и
     * посмотрите, что будет, если в функцию передать некорректное значение.
     *
     * Соберите вашу программу для релиза (с директивой NDEBUG) и выполните код
     * с некорректными значениям. Объясните полученные результаты.
     */

    // В release версии игнорируются assert
    
    /**
     * Задание 4. Ссылки в качестве параметров. Передача указателя на
     * встроенный массив в качестве параметра функции.
     *
     * Напишите две взаимодополняющие друг друга функции:
     *
     * 1.  ... day_of_year(...) - преобразует день месяца (число,месяц и год
     *    задаются в качестве параметров) в порядковый день года (возвращаемое
     *    значение);
     * 2. ... day_of_month(...) - функция преобразует порядковый день года в день
     *    месяца (принимает год и порядковый день года в качестве параметров и
     *    должна сформировать день месяца и номер месяца и каким-то образом
     *    сообщить эти значения вызывающей процедуре).
     *
     * Проверьте работоспособность обеих функций с помощью следующего
     * фрагмента.
     */

    {
        /**
         * В процессе вычислений Вам придется учитывать "високосный -
         * невисокосный" год.
         *
         * Для этого предлагается в каждую функцию в качестве одного из
         * параметров передавать данные приведенного ниже двухмерного массива
         * nDayTab.
         */
        size_t nDayTab[2][12] = {
            {31,28,31,30,31,30,31,31,30,31,30,31}, //невисокосный год
            {31,29,31,30,31,30,31,31,30,31,30,31}};  //високосный год

        /** Вызов функции DayOfYear */
        size_t month;
        size_t day = day_of_year(7, 6, 2024, nDayTab);
        /** Проверка результата обратной функцией DayOfMonth */
        day = day_of_month(day, 2024, month, nDayTab);
    }

    /**
     * Задание 5. 
     *
     * Создайте одномерный динамический массив, заполните его значениями.
     *
     * Напишите функцию add_unique, которая добавляет в массив новое значение
     * только при условии, что такого значения в массиве еще нет. 
     *
     * Для проверки напишите функцию prsize_t_array, которая выводит значения всех
     * элементов на экран.
     *
     * Ваша функция должна работать в следующем фрагменте кода.
     */

    {
      std::cout << "\n5.\n";
      std::cout << "Input N: ";

      size_t n; // сформируйте значение n
      std::cin >> n;

      size_t *arr = new size_t[n]; // создайте тут массив размера n
      
      /** заполнение случайными значениями */
      for (size_t i = 0; i < n; ++i) {
        arr[i] = rand();
      }

      for (size_t i = 0; i < 100; ++i) {
          size_t new_value = 0;

          new_value = rand() % 10; // случайное значение
          /** вызов функции добавления в массив */
          add_unique(arr, n, new_value);
      }
      
      /** печать массива на экран */
      prsize_t_array(arr, n);
      delete[] arr;

      /**
       * Тут должно быть не более 10 + n элементов, так как во втором цикле
       * могут быть получены только 10 разных вариантов.
       */
    }

    /**
     * Задание 6. Рекурсивные функции.
     *
     * Напишите рекурсивную функцию вычисления суммы первых N натуральных
     * чисел.
     */
    {
      size_t N = 0;

      std::cout << "\n6.\n" << "Input N: ";
      std::cin >> N;

      // TODO: сделать то, что нужно

      sum_size_t(N);
    }

    /**
     * Задание 7. Кодирование-декодирование информации. Обработка ошибок.
     *
     * Напишите набор функций, которые будут осуществлять кодировку-декодировку
     * информации из "сырых" байтов в ограниченный набор из 32 печатаемых
     * символов из таблицы {A, B, C, ..., Z, 1, 2, 3, 4}. Делается это
     * следующим образом: данная последовательность байтов разделяется на части
     * по 5 бит (если делится неровно - заполняем нулями). Каждая пятерка битов
     * переводится в целое число от 0 до 31 и по этому индексу выбирается
     * символ в таблице.
     *
     * Например, два байта 0x1E47 будут закодированы так:
     *
     * 1. запишем в двоичном виде и разделим на пятерки (дополнив нулями): 
     *    0001 1110 0100 0111 -> 00011 11001 00011 10000
     * 2. каждую пятерку переведем в число:
     *    00011 11001 00011 10000 -> 3 25 3 16
     * 3. Для каждого числа подставим символ из таблицы:
     *    3 25 3 16 -> DZDQ
     *
     * Таким образом из двух байт, которые могут принимать любые значения, мы
     * получили 4 символа из английского алфавита (и нескольких цифр), которые
     * можно, например, напечатать на экран.
     *
     * Напишите семейство функций, которые бы реализовали такое преобразование:
     *
     * 1. size_t encoded32_size(size_t raw_size) - функция, которая вычисляет размер
     *    закодированных данных при размере оригинальных данных `raw_size`.
     *
     * 2. size_t decoded32_size(size_t encode_size) - функция, обратная первой.
     *
     * 3. size_t encode32(const char *raw_data, size_t raw_size, char *dst) - 
     *    функция кодирует "сырые" байты `raw_data` размером `raw_size` и
     *    записывает результат в буфер `dst`; предполагается, что по адресу
     *    `dst` уже выделена память; функция возвращает 0 при удачном
     *    выполнении и возвращает 1, если какой-то из переданных аргументов
     *    имеет недопустимое значение.
     *
     * 4. size_t decode32(const char *encoded_data, size_t encoded_size, char *dst) -
     *    функция, обратная третьей; возвращает 0 при успешном декодировании,
     *    1 при недопустимом значении аргументов; 2 при недопустимом символе в
     *    `encoded_data` (не из таблицы).
     *
     * Проверьте правильность работы функций: закодируйте строки разной длины,
     * после чего декодируйте их. Декодированные строки должны совпадать с
     * изначальными.
     */
    {
      std::cout << "\n7.\n";

      const char *str = "1e47";
      size_t size = (size_t)strlen(str);

      size_t enc = encoded32_size(size), dec = decoded32_size(enc), flag = 0;
      char *dst = new char[enc + 1] {0}, *res = new char[dec + 1] {0};

      std::cout << "Source: " << str << '\n';

      if (!(flag = encode32(str, size, dst)))
      {
        std::cout << "Encoded: " << dst << '\n';
        flag = decode32(dst, enc, res);
        if (flag == 0)
          std::cout << "Decoded: " << res << '\n';
        else if (flag == 1)
          std::cout << "Invalid arguments were entered (decode)\n";
        else
          std::cout << "Invalid string were entered\n";

      }
      else
        std::cout << "Invalid arguments were entered (encode)\n";
    }

    /**
     * Задание 8. Функции и макросы с переменным числом параметров.
     */

    /**
     * Задание 8.1.
     *
     * Напишите функцию var_args, которая принимает переменное число аргументов
     * типа size_t и выводит на печать число принятых параметров и их значения.
     *
     * Функция должна работать с помощью макросов va_start, va_arg и va_end.
     *
     * Признаком конца списка является нулевое значение.
     */
    {
      std::cout << "\n8.\n";
      
      size_t nN1=5, nN2=11, nN3=4, nN4=7, nN5=-1;

      var_args(nN1, 0); 
      var_args(nN1, nN2, 0); 
      var_args(nN1, nN2, nN3, nN4, nN5, 0); 
    }

    /**
     * Задание 8.1.
     *
     * Задайте макрос VAR_ARGS с переменным числом параметров, который будет
     * вызывать функцию var_args с параметрами макроса, но подставлять в конец
     * 0. Таким образом эту функцию можно будет вызывать без нуля в конце.
     */

    {
      std::cout << "\n8.1.\n";

      size_t nN1=5, nN2=11, nN3=4, nN4=7, nN5=-1;
      VAR_ARGS(nN1); 
      VAR_ARGS(nN1, nN2); 
      VAR_ARGS(nN1, nN2, nN3, nN4, nN5); 
    }

    /**
     * Задание 9. Возвращение адреса.
     *
     * Напишите функцию, которая находит минимальное значение в массиве, таким
     * образом, чтобы ее вызов можно было использовать слева от знака
     * равенства: 
     *
     * `*my_min(параметры) = 0;`
     */
    {
      std::cout << "\n9.\n";

      size_t N, *ar;

      std::cout << "Enter array size: ";
      std::cin >> N;

      ar = new size_t[N] {};
      std::cout << "Enter array elements: ";
      for (size_t i = 0; i < N; i++)
        std::cin >> ar[i];

      *my_min(ar, N) = 0;

      for (size_t i = 0; i < N; i++)
        std::cout << ar[i];
    }

    return 0;
}
